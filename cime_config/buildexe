#!/usr/bin/env python

"""
build model executable
"""

import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib         import parse_input
from CIME.build            import get_standard_makefile_args
from CIME.case             import Case
from CIME.utils            import expect, run_cmd, safe_copy

#pylint: disable=undefined-variable
logger = logging.getLogger(__name__)

###############################################################################
def _main_func():
###############################################################################

    caseroot, _, _ = parse_input(sys.argv)

    logger.info("Building a single executable version of target model")

    with Case(caseroot) as case:
        # Retrieve variables
        casetools = case.get_value("CASETOOLS")
        cimeroot  = case.get_value("CIMEROOT")
        exeroot   = case.get_value("EXEROOT")
        gmake     = case.get_value("GMAKE")
        gmake_j   = case.get_value("GMAKE_J")
        cime_model     = case.get_value("MODEL")
        num_esp   = case.get_value("NUM_COMP_INST_ESP")
        ocn_model = case.get_value("COMP_OCN")
        atm_model = case.get_value("COMP_ATM")
        gmake_args = get_standard_makefile_args(case)

    if ocn_model == 'mom' or atm_model == "ufsatm":
        gmake_args += "USE_FMS=TRUE"

    gmake_args += " --debug "

#    ncep_libs = os.environ.get("NCEP_LIBS")
#    if ncep_libs is not None:
    if atm_model == "ufsatm":
#            gmake_args += " USER_SLIBS=\"-L{} {}\" ".format(os.path.join(ncep_libs,"lib"), "-lnemsio -lbacio -lsp -lw3emc -lw3nco")
        gmake_args += " USER_INCLDIR=-I{} ".format(os.path.join(exeroot,"atm","obj","FV3","mod"))
        gmake_args += "USER_SLIBS=\""
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3")," -lfv3atm -lfv3dycore ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3","cpl")," -lcpl ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3","io")," -lio ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3","ipd")," -lipd ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3","gfsphysics")," -lgfsphysics ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3","stochastic_physics")," -lstochastic_physics_wrapper ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","stochastic_physics")," -lstochastic_physics ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3","ccpp","driver")," -lccppdriver ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3","ccpp","physics")," -lccppphys ")
        gmake_args += " -L{} {} ".format(os.path.join(exeroot,"atm","obj","FV3","ccpp","framework","src")," -lccpp ")
        gmake_args +=     os.environ.get("NEMSIO_LIB")
        gmake_args += " "+os.environ.get("BACIO_LIB4")
        gmake_args += " "+os.environ.get("W3EMC_LIBd")
        gmake_args += " "+os.environ.get("W3NCO_LIBd")
        gmake_args += " "+os.environ.get("SP_LIBd")
        gmake_args += "\""

    comp_classes = case.get_values("COMP_CLASSES")
    if not "CPL" in comp_classes:
        # In this case NEMS.exe should already be built
        safe_copy(os.path.join(exeroot,"atm","obj","NEMS.exe"),os.path.join(exeroot,"ufs.exe"))
        return

    for comp in comp_classes:
        model = case.get_value("COMP_{}".format(comp))
        stubcomp = "s{}".format(comp.lower())
        if model == stubcomp:
            gmake_args += " {}_PRESENT=FALSE".format(comp)
    gmake_args += " IAC_PRESENT=FALSE"
    expect((num_esp is None) or (int(num_esp) == 1), "ESP component restricted to one instance")

    bld_root = os.path.join(exeroot,'cpl','obj')
    if not os.path.isdir(bld_root):
        os.makedirs(bld_root)

    with open(os.path.join(bld_root,'Filepath'), 'w') as out:
        out.write(os.path.join(caseroot, "SourceMods", "src.drv") + "\n")
        out.write(os.path.join(cimeroot, "src", "model", "NEMS", "src") + "\n")

    #comp_root_dir_cpl = case.get_value("COMP_ROOT_DIR_CPL")
    #print bldroot
    #with open('Filepath', 'w') as out:
    #    out.write(os.path.join(caseroot, "SourceMods", "src.drv") + "\n")
    #    #out.write(os.path.join(comp_root_dir_cpl, "mediator") + "\n")
    #    #out.write(os.path.join(comp_root_dir_cpl, "drivers", "cime") + "\n")
    #    out.write(os.path.join(comp_root_dir_cpl, "../src") + "\n")

    # List of source files that will be removed from the Srcfiles
    remove_files = [ "module_MEDIATOR.F90",
                     "module_MEDIATOR_methods.F90",
                     "module_MEDIATOR_SpaceWeather.F90"
                   ]

    # Set makefile and exefile paths
    makefile = os.path.join(casetools, "Makefile")
    exename = os.path.join(exeroot, cime_model + ".exe")
    
    # Always relink
    if os.path.isfile(exename):
        os.remove(exename)

    # Generate Srcfiles
    cmd = "{} Srcfiles -j {} MODEL=driver {} -f {} ".format(gmake, gmake_j, gmake_args, makefile)
    rc, out, err = run_cmd(cmd)

    # Remove files from Srcfiles, listed in remove_files, rc is not checked here on purpose beacuse it exits
    with open(os.path.join(bld_root,"Srcfiles"), "r+") as f:
        d = f.readlines()
        f.seek(0)
        for i in d:
            if i.rstrip() not in remove_files:
                f.write(i)
            f.truncate() 

    # Build model executable
    cmd = "{} exec_se -j {} EXEC_SE={} MODEL=driver {} -f {} ".format(gmake, gmake_j, exename, gmake_args, makefile)
    rc, out, err = run_cmd(cmd)
    expect(rc==0,"Command {} failed rc={}\nout={}\nerr={}".format(cmd,rc,out,err))
    logger.info(out)

###############################################################################

if __name__ == "__main__":
    _main_func()
