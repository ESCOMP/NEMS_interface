#!/usr/bin/env python

"""Namelist creator for NEMS's driver.
"""

# Typically ignore this.
# pylint: disable=invalid-name

# Disable these because this is our standard setup
# pylint: disable=wildcard-import,unused-wildcard-import,wrong-import-position

import os, sys, copy, shutil

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.nmlgen import NamelistGenerator
from CIME.namelist import parse
from CIME.buildnml import create_namelist_infile, parse_input
from CIME.utils import expect, safe_copy, symlink_force, ls_sorted_by_mtime

logger = logging.getLogger(__name__)

# returns active components
def active_components(case):
    # query compset
    compset = case.get_value("COMPSET")
    # parse compset
    components = compset.split("_")[1:]
    # remove stub components
    components = [ x for x in components if "S" not in x[0] ]

    return components

# returns index of list containing sub string
# adapted from https://stackoverflow.com/a/2170915
def index_containing_substring(the_list, substring):
    index_lst = []
    for i, s in enumerate(the_list):
        if substring in s:
              index_lst.append(i)
    return index_lst

###############################################################################
def prep_input(case, casedocsdir, nmlgen):
###############################################################################

    mesh_ice = nmlgen.get_value("mesh_ice")
    print mesh_ice

###############################################################################
def _create_drv_namelists(case, infile, confdir, nmlgen):
###############################################################################

    # Set config dictionary
    config = {}

    #--------------------------------
    # (1) Initialize namelist defaults
    #--------------------------------

    nmlgen.init_defaults(infile, config)

    if case.get_value('MEDIATOR_READ_RESTART'):
        nmlgen.set_value('mediator_read_restart', value='.true.')
    else:
        nmlgen.set_value('mediator_read_restart', value='.false.')

    #--------------------------------
    # (1) Specify input data list file
    #--------------------------------

    data_list_path = os.path.join(case.get_case_root(), "Buildconf", "cpl.input_data_list")
    if os.path.exists(data_list_path):
        os.remove(data_list_path)

    #--------------------------------
    # (2) Write nems.configure file and add to input dataset list.
    #--------------------------------

    rootpe = case.get_value('ROOTPE_ATM')
    ntasks = case.get_value('NTASKS_ATM')
    nmlgen.set_value('ATM_petlist_bounds', '{} {}'.format(rootpe, (rootpe+ntasks)-1))

    rootpe = case.get_value('ROOTPE_OCN')
    ntasks = case.get_value('NTASKS_OCN')
    nmlgen.set_value('OCN_petlist_bounds', '{} {}'.format(rootpe, (rootpe+ntasks)-1))

    rootpe = case.get_value('ROOTPE_ICE')
    ntasks = case.get_value('NTASKS_ICE')
    nmlgen.set_value('ICE_petlist_bounds', '{} {}'.format(rootpe, (rootpe+ntasks)-1))

    nuopc_config_file = os.path.join(confdir, "nems.configure")
    if os.path.isfile(nuopc_config_file):
        os.remove(nuopc_config_file)

    nmlgen.write_nuopc_config_file(nuopc_config_file, data_list_path=data_list_path)

    #--------------------------------
    # (3) Sort entries in nems.configure
    #--------------------------------

    if os.path.isfile(nuopc_config_file):
        with open(nuopc_config_file, 'r') as nems_configure:
            lines = nems_configure.readlines()

    # Create new list with merged groups
    indx = index_containing_substring(lines, '::')
    lines_new = lines[0:indx[0]]
    for i in range(0, len(indx), 2):
        lines_new.append(''.join(lines[indx[i]:indx[i+1]+1]))

    # Sort list
    lines_new.sort()

    # Overwrite nems.configure
    if os.path.isfile(nuopc_config_file):
        with open(nuopc_config_file, 'w') as nems_configure:
            for line in lines_new:
                nems_configure.write(line)
            nems_configure.close()

    #--------------------------------
    # (4) Add NUOPC runseq to nems.configure
    #--------------------------------

    _create_runseq(case, nuopc_config_file)

    #--------------------------------
    # (5) Write namelist file drv_in
    #--------------------------------
    namelist_file = os.path.join(confdir, "drv_in")
    drv_namelist_groups = ["papi_inparm", "pio_default_inparm", "prof_inparm"]
    nmlgen.write_output_file(namelist_file, data_list_path=data_list_path, groups=drv_namelist_groups)

###############################################################################
def _create_runseq(case, nuopc_config_file):
###############################################################################

    cpl_add_aoflux = case.get_value('ADD_AOFLUX_TO_RUNSEQ')
    hist_n = int(case.get_value('HIST_N'))

    # Get active components
    components = active_components(case)

    # Remove CCPP suite from component name
    components = ['ufsatm' if 'ufsatm' in x else x for x in components]

    # Calculate base dt
    ncpl_base_period  = case.get_value('NCPL_BASE_PERIOD')
    if ncpl_base_period == 'hour':
        basedt = 3600
    elif ncpl_base_period == 'day':
        basedt = 3600 * 24
    elif ncpl_base_period == 'year':
        if case.get_value('CALENDAR') == 'NO_LEAP':
            basedt = 3600 * 24 * 365
        else:
            expect(False, "Invalid CALENDAR for NCPL_BASE_PERIOD %s " %ncpl_base_period)
    elif ncpl_base_period == 'decade':
        if case.get_value('CALENDAR') == 'NO_LEAP':
            basedt = 3600 * 24 * 365 * 10
        else:
            expect(False, "invalid NCPL_BASE_PERIOD NCPL_BASE_PERIOD %s " %ncpl_base_period)
    else:
        expect(False, "invalid NCPL_BASE_PERIOD NCPL_BASE_PERIOD %s " %ncpl_base_period)

    if basedt < 0:
        expect(False, "basedt invalid overflow for NCPL_BASE_PERIOD %s " %ncpl_base_period)

    # Determine coupling intervals
    comps = case.get_values("COMP_CLASSES")
    mindt = basedt
    coupling_times = {}
    for comp in comps:
        ncpl = case.get_value(comp.upper() + '_NCPL')
        if ncpl is not None:
            cpl_dt = basedt // int(ncpl)
            totaldt = cpl_dt * int(ncpl)
            if totaldt != basedt:
                expect(False, " %s ncpl doesn't divide base dt evenly" %comp)
            coupling_times[comp.lower() + '_cpl_dt'] = cpl_dt
            mindt = min(mindt, cpl_dt)

    # Get coupling timesteps
    atm_cpl_dt = coupling_times["atm_cpl_dt"]
    ocn_cpl_dt = coupling_times["ocn_cpl_dt"]

    # Append run sequence to nems.configure
    ncomp = len(components)

    if os.path.isfile(nuopc_config_file):
        with open(nuopc_config_file, 'a') as nems_configure:
            # Standalone ATM
            if ncomp == 1 and atm_here:
                nems_configure.write("runSeq::                                \n")
                nems_configure.write("   ATM                                  \n")
                nems_configure.write("::                                      \n")
                nems_configure.close()
            # Coupled ATM-OCN-ICE
            elif ncomp == 3:
                # Warm start
                if case.get_value("CONTINUE_RUN") or case.get_value("MEDIATOR_READ_RESTART"):
                    logger.info("NUOPC run sequence: warm start (concurrent)")

                    nems_configure.write("runSeq::                                \n")
                    nems_configure.write("@" + str(ocn_cpl_dt) + "                \n")
                    nems_configure.write("   MED med_phases_prep_ocn_accum_avg    \n")
                    nems_configure.write("   MED -> OCN :remapMethod=redist       \n")
                    nems_configure.write("   OCN                                  \n")
                    nems_configure.write("   @" + str(atm_cpl_dt) + "             \n")
                    nems_configure.write("     MED med_phases_prep_atm            \n")
                    nems_configure.write("     MED med_phases_prep_ice            \n")
                    nems_configure.write("     MED -> ATM :remapMethod=redist     \n")
                    nems_configure.write("     MED -> ICE :remapMethod=redist     \n")
                    nems_configure.write("     ATM                                \n")
                    nems_configure.write("     ICE                                \n")
                    nems_configure.write("     ATM -> MED :remapMethod=redist     \n")
                    nems_configure.write("     ICE -> MED :remapMethod=redist     \n")
                    nems_configure.write("     MED med_fraction_set               \n")
                    nems_configure.write("     MED med_phases_prep_ocn_map        \n")
                    if cpl_add_aoflux:
                        nems_configure.write("     MED med_phases_aofluxes_run        \n")
                    nems_configure.write("     MED med_phases_prep_ocn_merge      \n")
                    nems_configure.write("     MED med_phases_prep_ocn_accum_fast \n")
                    if hist_n > 0:
                        nems_configure.write("     MED med_phases_history_write       \n")
                    nems_configure.write("     MED med_phases_profile             \n")
                    nems_configure.write("   @                                    \n")
                    nems_configure.write("   OCN -> MED :remapMethod=redist       \n")
                    nems_configure.write("   MED med_phases_restart_write         \n")
                    nems_configure.write("@                                       \n")
                    nems_configure.write("::                                      \n")
                    nems_configure.close()
                # Cold start
                else:
                    logger.info("NUOPC run sequence: cold start (sequential)")
                    nems_configure.write("runSeq::                                \n")
                    nems_configure.write("@" + str(ocn_cpl_dt) + "                \n")
                    nems_configure.write("   @" + str(atm_cpl_dt) + "             \n")
                    nems_configure.write("     MED med_phases_prep_atm            \n")
                    nems_configure.write("     MED -> ATM :remapMethod=redist     \n")
                    nems_configure.write("     ATM                                \n")
                    nems_configure.write("     ATM -> MED :remapMethod=redist     \n")
                    nems_configure.write("     MED med_phases_prep_ice            \n")
                    nems_configure.write("     MED -> ICE :remapMethod=redist     \n")
                    nems_configure.write("     ICE                                \n")
                    nems_configure.write("     ICE -> MED :remapMethod=redist     \n")
                    nems_configure.write("     MED med_fraction_set               \n")
                    nems_configure.write("     MED med_phases_prep_ocn_map        \n")
                    if cpl_add_aoflux:
                        nems_configure.write ("     MED med_phases_aofluxes_run        \n")
                    nems_configure.write("     MED med_phases_prep_ocn_merge      \n")
                    nems_configure.write("     MED med_phases_prep_ocn_accum_fast \n")
                    if hist_n > 0:
                        nems_configure.write("     MED med_phases_history_write       \n")
                    nems_configure.write("     MED med_phases_profile             \n")
                    nems_configure.write("   @                                    \n")
                    nems_configure.write("   MED med_phases_prep_ocn_accum_avg    \n")
                    nems_configure.write("   MED -> OCN :remapMethod=redist       \n")
                    nems_configure.write("   OCN                                  \n")
                    nems_configure.write("   OCN -> MED :remapMethod=redist       \n")
                    nems_configure.write("   MED med_phases_restart_write         \n")
                    nems_configure.write("@                                       \n")
                    nems_configure.write("::                                      \n")
                    nems_configure.close()

###############################################################################
def buildnml(case, caseroot, component):
###############################################################################
    if component != "drv":
        raise AttributeError

    # Determine CaseDocs
    casedocsdir = os.path.join(caseroot,"CaseDocs")

    # Determine ConfDir
    confdir = os.path.join(case.get_value("CASEBUILD"), "cplconf")
    if not os.path.isdir(confdir):
        os.makedirs(confdir)

    # Path for namelist files
    srcroot = case.get_value("SRCROOT")
    namelist_xml_dir = os.path.join(srcroot,"src","model","NEMS","cime","cime_config")

    # Set namelist definition file
    definition_file = [os.path.join(namelist_xml_dir, "namelist_definition_drv.xml")]

    # Create the namelist generator object - independent of instance
    nmlgen = NamelistGenerator(case, definition_file)

    # Create cplconf/namelist
    infile_text = ""

    # Determine infile list for nmlgen
    user_nl_file = os.path.join(caseroot, "user_nl_cpl")
    namelist_infile = os.path.join(confdir, "namelist_infile")
    create_namelist_infile(case, user_nl_file, namelist_infile, infile_text)
    infile = [namelist_infile]

    # Create the files nuopc.runconfig, nuopc.runseq, drv_in and drv_flds_in
    _create_drv_namelists(case, infile, confdir, nmlgen)

    # Set rundir
    rundir = case.get_value("RUNDIR")

    # Copy nuopc.runconfig to rundir
    shutil.copy(os.path.join(confdir,"nems.configure"), rundir)

    # Prepare input
    prep_input(case, casedocsdir, nmlgen)

    # Copy fd.yaml to rundir
    cimeroot = case.get_value("CIMEROOT")
    fd_dir = os.path.join(cimeroot,"src","drivers","nuopc","mediator")
    if not os.path.isdir(fd_dir):
        srcroot = case.get_value("SRCROOT")
        fd_dir = os.path.join(srcroot,"src","model","CMEPS","mediator")

    coupling_mode = case.get_value('COUPLING_MODE')
    if coupling_mode == 'hafs':
        filename = os.path.join(fd_dir,"fd_hafs.yaml")
        shutil.copy(filename, os.path.join(rundir, "fd.yaml"))
    elif 'nems' in coupling_mode:
        filename = os.path.join(fd_dir,"fd_nems.yaml")
        shutil.copy(filename, os.path.join(rundir, "fd_nems.yaml"))
    else:
        expect(False, "coupling mode currently only supports cesm, hafs and nems")

    # Copy drv_in to rundir
    shutil.copy(os.path.join(confdir,"drv_in"), rundir)
    shutil.copy(os.path.join(confdir,"drv_in"), os.path.join(rundir,"pio_in"))

###############################################################################
def _main_func():
    caseroot = parse_input(sys.argv)

    with Case(caseroot) as case:
        buildnml(case, caseroot, "drv")

if __name__ == "__main__":
    _main_func()
